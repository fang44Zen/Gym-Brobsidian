/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => GymBrObsidian
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// components/SettingTab.ts
var import_obsidian = require("obsidian");
var GymBroSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Gym Log Settings" });
    for (const session in this.plugin.settings.sessions) {
      new import_obsidian.Setting(containerEl).setName(session).setDesc(`Exercises in ${session}`).addTextArea((textArea) => {
        textArea.setValue(
          this.plugin.settings.sessions[session].join("\n")
        ).onChange(async (value) => {
          this.plugin.settings.sessions[session] = value.split("\n");
          await this.plugin.saveSettings();
        });
      });
    }
  }
};

// components/GymBroNoteCreator.ts
var import_obsidian2 = require("obsidian");
var GymBroNoteCreator = class {
  constructor(app, settings, session) {
    this.app = app;
    this.settings = settings;
    this.session = session;
  }
  async createNote() {
    const today = (0, import_obsidian2.moment)().format("YYYY-MM-DD");
    const noteTitle = `${this.session} - ${today}`;
    try {
      const file = await this.app.vault.create(
        `${noteTitle}.md`,
        this.getInitialContent()
      );
      await this.app.workspace.getLeaf(true).openFile(file);
      return file;
    } catch (error) {
      console.error("Failed to create note:", error);
      return null;
    }
  }
  getInitialContent() {
    const exercises = this.settings.sessions[this.session];
    return `
# ${this.session} - ${(0, import_obsidian2.moment)().format("YYYY-MM-DD")}

## Exercises

${exercises.map((exercise) => `- ${exercise}`).join("\n")}

\`\`\`custom-components
\`\`\`
    `;
  }
};

// components/GymBroModal.ts
var import_obsidian3 = require("obsidian");
var GymBroModal = class extends import_obsidian3.Modal {
  constructor(app, sessions, resolve) {
    super(app);
    this.sessions = sessions;
    this.resolve = resolve;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Select a Session" });
    this.sessions.forEach((session) => {
      const button = contentEl.createEl("button", { text: session });
      button.addEventListener("click", () => {
        this.resolve(session);
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// components/customComponentsProcessor.ts
var import_obsidian4 = require("obsidian");
function customComponentsProcessor(app, source, el, ctx, session, settings) {
  const container = document.createElement("div");
  const exerciseSelect = document.createElement("select");
  settings.sessions[session].forEach((exercise) => {
    const option = document.createElement("option");
    option.value = exercise;
    option.textContent = exercise;
    exerciseSelect.appendChild(option);
  });
  const addButton = document.createElement("button");
  addButton.textContent = "Add Exercise";
  addButton.classList.add("add-button");
  addButton.addEventListener("click", () => {
    addExerciseToMarkdown(
      ctx.sourcePath,
      app,
      exerciseSelect.value,
      container
    );
  });
  container.appendChild(exerciseSelect);
  container.appendChild(addButton);
  el.appendChild(container);
  const file = ctx.sourcePath ? app.vault.getAbstractFileByPath(ctx.sourcePath) : null;
  if (file instanceof import_obsidian4.TFile) {
    app.vault.read(file).then((content) => {
      const tables = parseTables(content);
      tables.forEach((table) => el.insertBefore(table, container));
    });
  }
  function addExerciseToMarkdown(filePath, app2, exercise, container2) {
    const file2 = app2.vault.getAbstractFileByPath(filePath);
    if (file2 instanceof import_obsidian4.TFile) {
      app2.vault.read(file2).then((content) => {
        const tableRegex = /\| *Exercise *\| *Set *\| *Reps *\| *Weight *\| *Rest *\|\n\| *-+ *\| *-+ *\| *-+ *\| *-+ *\| *-+ *\|\n([\s\S]+?)(?=\n|$)/g;
        const match = tableRegex.exec(content);
        if (match) {
          const newRow = `| ${exercise} | 0 | 0 | 0 | 0 |
`;
          const updatedTable = match[0] + newRow;
          const updatedContent = content.replace(
            match[0],
            updatedTable
          );
          app2.vault.modify(file2, updatedContent).then(() => {
            console.log("New row added to existing table");
            const updatedTables = parseTables(updatedContent);
            el.innerHTML = "";
            updatedTables.forEach(
              (table) => el.insertBefore(table, container2)
            );
            el.appendChild(container2);
          });
        } else {
          const newTable = `
| Exercise | Set | Reps | Weight | Rest |
| --- | --- | --- | --- | --- |
| ${exercise} | 0 | 0 | 0 | 0 |
`;
          const updatedContent = content.trim() + "\n\n" + newTable;
          app2.vault.modify(file2, updatedContent).then(() => {
            console.log("New table created successfully");
            const updatedTables = parseTables(updatedContent);
            el.innerHTML = "";
            updatedTables.forEach(
              (table) => el.insertBefore(table, container2)
            );
            el.appendChild(container2);
          });
        }
      });
    } else {
      console.error("File not found or not a TFile");
    }
  }
  function parseTables(content) {
    const tables = [];
    const regex = /\| Exercise \| Set \| Reps \| Weight \| Rest \|\n\| --- \| --- \| --- \| --- \| --- \|\n([\s\S]+?)(?=\n|$)/g;
    let match;
    while ((match = regex.exec(content)) !== null) {
      const tableHtml = `
			<table>
				<thead>
					<tr>
						<th>Exercise</th>
						<th>Set</th>
						<th>Reps</th>
						<th>Weight</th>
						<th>Rest</th>
					</tr>
				</thead>
				<tbody>
					${match[1].trim().split("\n").map(
        (row) => `
						<tr>
							${row.split("|").map((cell) => `<td>${cell.trim()}</td>`).join("")}
						</tr>
					`
      ).join("")}
				</tbody>
			</table>
			`;
      const container2 = document.createElement("div");
      container2.innerHTML = tableHtml;
      tables.push(container2);
    }
    return tables;
  }
}

// settings.ts
var DEFAULT_SETTINGS = {
  sessions: {
    Push: ["Bench Press", "Shoulder Press", "Triceps Extension"],
    Pull: ["Pull Up", "Row", "Bicep Curl"],
    Leg: ["Squat", "Deadlift", "Leg Press"]
  }
};

// main.ts
var GymBrObsidian = class extends import_obsidian5.Plugin {
  async onload() {
    console.log("Loading Gym Log Plugin");
    await this.loadSettings();
    this.addRibbonIcon("dumbbell", "Open Gym Log", () => {
      this.openGymLog();
    });
    this.addSettingTab(new GymBroSettingTab(this.app, this));
  }
  onunload() {
    console.log("Unloading Gym Log Plugin");
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async openGymLog() {
    const sessions = Object.keys(this.settings.sessions);
    await (0, import_obsidian5.moment)().format("YYYY-MM-DD");
    const session = await new Promise((resolve) => {
      const modal = new GymBroModal(this.app, sessions, resolve);
      modal.open();
    });
    const noteCreator = new GymBroNoteCreator(
      this.app,
      this.settings,
      session
    );
    const file = await noteCreator.createNote();
    if (file instanceof import_obsidian5.TFile) {
      this.registerMarkdownCodeBlockProcessor(
        "custom-components",
        (source, el, ctx) => {
          customComponentsProcessor(
            this.app,
            source,
            el,
            ctx,
            session,
            this.settings
          );
        }
      );
      await this.app.workspace.getLeaf(true).openFile(file);
      new import_obsidian5.Notice("Gym log created.");
    } else {
      new import_obsidian5.Notice("Failed to create gym log note.");
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
